*********Big Endian : - *******
#include <stdio.h>
int main()
{
    unsigned int num = 0x12345678;
    unsigned char *ptr = (unsigned char *)&num;

    printf("Original number: 0x%x\n", num);


    printf("Bytes in big-endian order: ");
    for(int i = sizeof(num)-1; i >= 0; i--)
    {
        printf("%02x ", ptr[i]);
    }
    printf("\n");

    return 0;
}
*******************************************
****** Littile Endian : - ***************

#include <stdio.h>
int main()
{
    unsigned int num = 0x12345678;
    unsigned char *ptr = (unsigned char *)&num;

    printf("Memory representation of  little-endian: ");
    for (int i = 0; i < sizeof(num); i++)
    {
        printf("%02X ", *(ptr + i));
    }
    printf("\n");

    return 0;
}
**************************************************

************Bit Swapped :- **********************

#include <stdio.h>
int main()
{
    int num = 90;
    int swapped;

    swapped = ((num & 0xF0) >> 4) | ((num & 0x0F) << 4);

    printf("Swapped number (binary): ");
    for (int i = 7; i >= 0; i--)
    {
        printf("%d", (swapped >> i) & 1);
    }
    printf("\n");

    return 0;
}
******************************************
********* Bitwise Odd and Even : - ********************
#include<stdio.h>
int main()
{
        int x;
        printf("Enter the number/n");
        scanf("%d",&x);

        if(x & 1)
        {
                printf("Odd");
        }
        else
        {
                printf("Even");
        }

        return 0;
}
***********************************************
************* Memory Management :- *******************

#include <stdio.h>
#include <stdlib.h>
int globalVar = 100;
void staticExample()
{
    static int staticVar = 0;
    staticVar++;
    printf("Static variable: %d\n", staticVar);
}

int main()
{
    int localVar = 10;

    int* heapVar = (int*)malloc(sizeof(int));
    *heapVar = 20;

    printf("Global variable: %d\n", globalVar);
    printf("Local variable: %d\n", localVar);
    printf("Heap variable: %d\n", *heapVar);

    staticExample();
    staticExample();
    staticExample();

    free(heapVar);

    return 0;
}
***************************************************************


****** Write a program to find whether the given number is even or odd using bitwise operators *****

#include <stdio.h>
void checkEvenOdd(int num) {
    if (num & 1) {
        printf("%d is ODD\n", num);
    } else {
        printf("%d is EVEN\n", num);
    }
}

int main() {
    int number;

    printf("Enter a number: ");
    scanf("%d", &number);

    checkEvenOdd(number);

    return 0;
}

******* Write a program Compare Two Strings Using Pointers. *****************
#include <stdio.h>
int compareStrings(const char* str1, const char* str2) 
{
    while (*str1 && *str2) 
{
        if (*str1 != *str2)
            return 0;
        str1++;
        str2++;
    }
    return (*str1 == '\0' && *str2 == '\0');
}
int main()
{
    char str1[100], str2[100];

    printf("Enter first string: ");
    scanf("%s", str1);

    printf("Enter second string: ");
    scanf("%s", str2);

    if (compareStrings(str1, str2)) 
    {
        printf("Strings are equal.\n");
    } 
    else 
    {
        printf("Strings are not equal.\n");
    }

    return 0;
}


*****************programme on the sum of bits by using bit manipulation.****************
#include <stdio.h>
int countSetBits(int num) 
{
    int count = 0;
    while (num) 
        {
        if (num & 1) 
        {
            count++;
        }
        num = num >> 1;
    }
    return count;
}
int main() 
{
    int number;
    printf("Enter a number: ");
    scanf("%d", &number);

    int sum = countSetBits(number);
    printf("Sum of bits  in %d is: %d\n", number, sum);
    return 0;
}

