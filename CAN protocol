1.what is  CAN protocol?
->  The can designed by Robert Bosch to improve the quality of automative industry
    by adding safety features, automatio and realibility into car.
    First use in Mercedes Benz[1991].
2. Features of CAN protocol?
-> the CAN protocol was developed by Robert Bosch & introduced in 1986.
-> It is two wired protocol
   ->CAN High
   ->CAN Low
-> CAN protocol is Broadcast.
-> CAN protocol is Multi-master(priority based bus acess)
-> CAN is Half duplex.
-> CAN is Asynchronous serial communication protocol.
-> CAN speed & distance 1 MBPS at network length below 40 meters.
-> max nodes on CAN bus pratically upto 30 Nodes.
-> CAN standard supports Bus topology commonly used topology is line/Bus topology.
-> CAN is available in two versions.
    ->standard CAN (version 2.0A)
      11 bit identifier
    ->Extended  CAN (version 2.0B)
      29 bit identifier.

-> Standard CAN protocol supports 8 bytes while CAN FD protocol supports 64 bytes in
   the data fild part.

3. Role of data link layer
  -> creating and sending messages
  -> error handling
  -> arbitration
  -> Baudrate/speed setting
  -> Bit stuffing and de-stuffing
  -> message acceptance

4. CAN messages
   ->Data frame
   ->Remote frame
   ->Error frame
   ->overload frame

 Data frame-: used to exchange data between ecu's.
 remote frame-: used to request a data frame from other ecu's.
 error-frame-: the node who detecte the error will generate & send it to other nodes in
                 the network.
 overload frame-: If any node starts the communication before completing the comunication before
                  of other node,then only overload frame will be generated.

5. standard data frame
  SOF(1 bit)
  Arbitration field(12 bits)
  control field(6 bits)
  Data field(0-64 bits)
  CRC field(16 bits)
  Ack field(2 bits)
  EOF(7 bits)
  IFS(3 bits)

6.SOF(1 bits)
->It is single dominant bit(0)
->It change will condition of the CAN bus.
->as soon as SOF is detected other nodes in the network will synchronize their clock
  so that every node can sync with other nodes.
->SOF is written on the bus idle-condition change oyyher know that communicatio started.

7. Arbitration field(12 bits)
-> In data frame RTR bit is 0 & in remote frame RTR bit is 1.
-> if nodes become winner error will be generated in network.
-> bit error generated when multiple nodes become winner.
-> arbitration comes ib multimaster comminication.
-> arbitration is taken care by data link layer.
-> identifier decide priority of the nessage 
-> CAN follow MSB to LSB data transfer method
-> in data frame RTR will be 0

8. control field(6 bits)
-> maximum 8 bytes of dat in1 data frame thats usly DLC in 4 bytes
  RBO- reserved bit num 0
  DLC- data length code

9. DATA field(0-64 bits)
-> this field contain data to be transmitted within a data frame.
-> each bytes in this field is transmitted with MSB first.

10. CRC field(16 bits)
-> CRC value is used for checking errors in a row data.
-> CRC value is generated by DLL based upon ID,RTR,DLC and data.
-> in the CAN protocol hardware method is used to generate CRC value.
-> 15 bit CRC value is generated by CAN controller
-> CRC delimiter generated by CAN controller
-> transmitter will write CRC delimiter on Bus.
-> if both CRC value is mathod then ack is genrated
-> for ack reciver node has to write 0 in the bus.


11. EOF(7 bits)
-> it is a sequence of 7 consecutive rececive bits.
-> when EOF is written on bus it is consider as bus is free
-> ECU can start the comminication after EOF only.
-> in CAN another field can send 7 times on bus except EOF
-> bit stuffing because of these mechanism no other field can send 7 times 1(contigious)

12. Bit-stuffing
-> if any nodes is transmitting 5 contigious bit of same polarity then opposite polarity
  bit is added in bitween.
-> deleting the extra bit is called as destuffing it is done by receiver node.

13.Inter frame space(IFS)- 3 bits
-> it is a sequnce of 3 consecutive recessive bits.
-> the purpose of IFS to insert a small delay between previaous DF & next DF so,that the
   receiver will get a small processinf time.
-> In rx nodes it will send to microcontroller for further process stroed in variable.
-> tx nodes information is recived by rx nodes can controller and store in register.
